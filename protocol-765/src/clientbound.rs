use ser::{Packet, Writable};

// Status Response
// packet id 0x0
#[derive(Packet, Writable, Debug)]
#[packet(0x00, Handshake)]
pub struct StatusResponse {
    pub json: String
}

// Pong
// packet id 0x01
#[derive(Packet, Writable, Debug)]
#[packet(0x01, Handshake)]
pub struct Pong {
    pub payload: i64
}


// // Encryption Request
// // Packet ID	State	Bound To	Field Name	Field Type	Notes
// // 0x01	Login	Client	Server ID	String (20)	Appears to be empty.
// // Public Key Length	VarInt	Length of Public Key
// // Public Key	Byte Array	The server's public key, in bytes.
// // Verify Token Length	VarInt	Length of Verify Token. Always 4 for Notchian servers.
// // Verify Token	Byte Array	A sequence of random bytes generated by the server.
// #[derive(Packet, Writable, Debug)]
// #[packet(0x01, Handshake)]
// pub struct EncryptionRequest {
//     pub server_id: String,
//     pub public_key: Vec<u8>,
//     pub verify_token: Vec<u8>
// }